let printedBarcodes = {
    pallets: [],
    boxes: []
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
function loadPrintedBarcodes() {
    const saved = localStorage.getItem('printedBarcodes');
    if (saved) {
        printedBarcodes = JSON.parse(saved);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
function savePrintedBarcodes() {
    localStorage.setItem('printedBarcodes', JSON.stringify(printedBarcodes));
}

// ==================== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–†–û–õ–¨ –í–ï–†–°–ò–ô ====================
const APP_VERSION = '6.1'; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏—é
const VERSION_KEY = 'app_version';

function checkVersion() {
    const savedVersion = localStorage.getItem(VERSION_KEY);
    
    if (savedVersion !== APP_VERSION) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏...');
        
        // –û—á–∏—â–∞–µ–º –∫—ç—à —Å—Ç–∏–ª–µ–π –∏ —Å–∫—Ä–∏–ø—Ç–æ–≤
        const links = document.querySelectorAll('link[rel="stylesheet"]');
        const scripts = document.querySelectorAll('script[src]');
        
        links.forEach(link => {
            if (link.href.includes('.css')) {
                link.href = link.href.split('?')[0] + '?v=' + Date.now();
            }
        });
        
        scripts.forEach(script => {
            if (script.src.includes('.js')) {
                script.src = script.src.split('?')[0] + '?v=' + Date.now();
            }
        });
        
        localStorage.setItem(VERSION_KEY, APP_VERSION);
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
        setTimeout(() => {
            window.location.reload(true);
        }, 500);
        
        return false;
    }
    
    console.log('‚úÖ –í–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞');
    return true;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
if (!checkVersion()) {
    throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏');
}

// ==================== –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ====================
async function initNativeFeatures() {
    if (!navigator.onLine) {
        showError('‚ö†Ô∏è –†–∞–±–æ—Ç–∞ –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ');
        document.getElementById('offlineIndicator').style.display = 'block';
    }
}

// ==================== FIREBASE –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
const firebaseConfig = {
  apiKey: "AIzaSyAbLcTFolqzRdLoKn1H_o8g0WhHiZPd3QI",
  authDomain: "warehouse-scanner-ai123.firebaseapp.com",
  projectId: "warehouse-scanner-ai123",
  storageBucket: "warehouse-scanner-ai123.firebasestorage.app",
  messagingSenderId: "188867148301",
  appId: "1:188867148301:web:38511b45f319c3ad213344"
};

let app;
let db;
let auth;

function initializeFirebase() {
    try {
        console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase...");
        app = firebase.initializeApp(firebaseConfig);
        db = firebase.firestore();
        auth = firebase.auth();
        console.log("‚úÖ Firebase –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        return { app, auth, db };
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ Firebase:", error);
        showError("–û—à–∏–±–∫–∞ Firebase: " + error.message);
        return null;
    }
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================
let currentPallet = null;
let currentBox = null;
let scanData = [];
let expectedItems = {};
let remainingItems = {};
let history = [];
let currentSort = { column: 'timestamp', direction: 'desc' };
let currentView = 'all';
let lastPalletNumber = 0;
let lastBoxNumber = 0;
let currentPage = 1;
const itemsPerPage = 50;
let currentDeviceId = null;

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ====================
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
    initializeFirebase();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
    const loginBtn = document.querySelector('.auth-form button:first-of-type');
    const registerBtn = document.querySelector('.auth-form button:last-of-type');
    
    if (loginBtn) loginBtn.addEventListener('click', handleLogin);
    if (registerBtn) registerBtn.addEventListener('click', handleRegister);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ —Ñ–æ—Ä–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const emailInput = document.getElementById('emailInput');
    const passwordInput = document.getElementById('passwordInput');
    
    if (emailInput && passwordInput) {
        emailInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                passwordInput.focus();
            }
        });
        
        passwordInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                handleLogin();
            }
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if (auth) {
        auth.onAuthStateChanged((user) => {
            if (user) {
                console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:", user.email);
                showAppInterface();
                initApp();
            }
        });
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    currentDeviceId = getDeviceId();
    const deviceIdElement = document.getElementById('deviceId');
    if (deviceIdElement) {
        deviceIdElement.textContent = currentDeviceId;
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    initNativeFeatures();
});

// ==================== –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ====================
async function handleLogin() {
    const email = document.getElementById('emailInput').value;
    const password = document.getElementById('passwordInput').value;
    
    if (!email || !password) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }
    
    try {
        const userCredential = await auth.signInWithEmailAndPassword(email, password);
        console.log("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω");
        showAppInterface();
        initApp();
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message);
    }
}

async function handleRegister() {
    const email = document.getElementById('emailInput').value;
    const password = document.getElementById('passwordInput').value;
    
    if (!email || !password) {
        showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
        return;
    }
    
    try {
        const userCredential = await auth.createUserWithEmailAndPassword(email, password);
        console.log("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
        showAppInterface();
        initApp();
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ' + error.message);
    }
}

async function logout() {
    try {
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
        currentPallet = null;
        currentBox = null;
        
        await auth.signOut();
        document.getElementById('appContainer').style.display = 'none';
        document.getElementById('authContainer').style.display = 'block';
        
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞
        document.getElementById('emailInput').value = '';
        document.getElementById('passwordInput').value = '';
        
        console.log("‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω");
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:", error);
        showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: " + error.message);
    }
}

function getDeviceId() {
    let deviceId = localStorage.getItem('deviceId');
    if (!deviceId) {
        deviceId = 'device-' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('deviceId', deviceId);
    }
    return deviceId;
}

// ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
function showAppInterface() {
    document.getElementById('authContainer').style.display = 'none';
    document.getElementById('appContainer').style.display = 'block';
    
    if (auth && auth.currentUser) {
        document.getElementById('userEmail').textContent = auth.currentUser.email;
    }
}

function initApp() {
    loadFromStorage();
    loadExpectedItems();
    loadHistory();
    loadLastNumbers();
    loadPrintedBarcodes(); // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
    
    updateCurrentInfo();
    updateDashboard();
    renderTable();
    updateExistingLists();
    renderHistory();
    renderExpectedItems();
    
    setupEventListeners();
    setupKeyboardShortcuts();
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    setTimeout(() => {
        const scanInput = document.getElementById('scanInput');
        if (scanInput) scanInput.focus();
    }, 100);
}

function clearPrintedBarcodes() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã?')) {
        printedBarcodes = { pallets: [], boxes: [] };
        savePrintedBarcodes();
        updateExistingLists();
        addToHistory('–û—á–∏—â–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã');
        alert('–°–æ–∑–¥–∞–Ω–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –æ—á–∏—â–µ–Ω—ã');
    }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
function updateDeviceIdHeader() {
    const deviceIdHeader = document.getElementById('deviceIdHeader');
    if (deviceIdHeader) {
        deviceIdHeader.textContent = currentDeviceId;
    }
}

// –í —Ñ—É–Ω–∫—Ü–∏–∏ getDeviceId() –¥–æ–±–∞–≤—å—Ç–µ:
function getDeviceId() {
    let deviceId = localStorage.getItem('deviceId');
    if (!deviceId) {
        deviceId = 'device-' + Math.random().toString(36).substr(2, 9);
        localStorage.setItem('deviceId', deviceId);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è ID
    setTimeout(() => {
        updateDeviceIdHeader();
    }, 100);
    
    return deviceId;
}

function loadFromStorage() {
    try {
        const saved = localStorage.getItem('warehouseScannerData');
        if (saved) {
            const data = JSON.parse(saved);
            scanData = data.scanData || [];
        }
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', e);
    }
}

function saveToStorage() {
    const dataToSave = {
        scanData: scanData,
    };
    localStorage.setItem('warehouseScannerData', JSON.stringify(dataToSave));
}

function loadExpectedItems() {
    try {
        const saved = localStorage.getItem('expectedItems');
        expectedItems = saved ? JSON.parse(saved) : {};
        calculateRemainingItems();
    } catch (error) {
        expectedItems = {};
    }
}

function saveExpectedItems() {
    localStorage.setItem('expectedItems', JSON.stringify(expectedItems));
}

function loadHistory() {
    try {
        const saved = localStorage.getItem('scanHistory');
        history = saved ? JSON.parse(saved) : [];
    } catch (error) {
        history = [];
    }
}

function saveHistory() {
    localStorage.setItem('scanHistory', JSON.stringify(history));
}

function loadLastNumbers() {
    lastPalletNumber = parseInt(localStorage.getItem('lastPalletNumber') || '0');
    lastBoxNumber = parseInt(localStorage.getItem('lastBoxNumber') || '0');
}

function saveLastNumbers() {
    localStorage.setItem('lastPalletNumber', lastPalletNumber);
    localStorage.setItem('lastBoxNumber', lastBoxNumber);
}

function calculateRemainingItems() {
    remainingItems = {...expectedItems};
    scanData.forEach(item => {
        if (remainingItems[item.barcode] !== undefined) {
            remainingItems[item.barcode] -= item.quantity;
            if (remainingItems[item.barcode] < 0) {
                remainingItems[item.barcode] = 0;
            }
        }
    });
}

function updateRemainingItems(barcode, quantityChange = 0) {
    if (expectedItems[barcode] !== undefined) {
        if (!remainingItems[barcode]) {
            remainingItems[barcode] = expectedItems[barcode];
        }
        remainingItems[barcode] = Math.max(0, remainingItems[barcode] - quantityChange);
    }
}

function addToHistory(action) {
    const historyItem = {
        timestamp: new Date().toLocaleString('ru-RU'),
        action: action,
        device: currentDeviceId
    };
    
    history.unshift(historyItem);
    if (history.length > 1000) history.pop();
    saveHistory();
    renderHistory();
}

function showError(message) {
    console.error("–û—à–∏–±–∫–∞:", message);
    
    const errorContainer = document.getElementById('errorContainer');
    if (!errorContainer) return;
    
    const errorDiv = document.createElement('div');
    errorDiv.className = 'error-message';
    errorDiv.innerHTML = `
        <div style="display: flex; align-items: center; justify-content: space-between;">
            <div>${message}</div>
            <button onclick="this.parentElement.parentElement.remove()" 
                    style="background: none; border: none; color: white; cursor: pointer; margin-left: 10px;">
                ‚úï
            </button>
        </div>
    `;
    
    errorContainer.appendChild(errorDiv);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (errorDiv.parentElement) {
            errorDiv.classList.add('hiding');
            setTimeout(() => {
                if (errorDiv.parentElement) {
                    errorDiv.remove();
                }
            }, 300);
        }
    }, 5000);
}

function renderHistory() {
    const historyList = document.getElementById('historyList');
    if (!historyList) return;
    
    historyList.innerHTML = '';
    const recentHistory = history.slice(0, 5);
    
    if (recentHistory.length === 0) {
        historyList.innerHTML = '<div class="history-item">–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</div>';
        return;
    }
    
    recentHistory.forEach(item => {
        const historyItem = document.createElement('div');
        historyItem.className = 'history-item';
        historyItem.innerHTML = `<div><strong>${item.timestamp}</strong></div><div>${item.action} (${item.device})</div>`;
        historyList.appendChild(historyItem);
    });
}

function setupEventListeners() {
    const scanInput = document.getElementById('scanInput');
    if (!scanInput) return;
    
    let scanBuffer = '';
    let scanTimeout = null;

    scanInput.addEventListener('input', (e) => {
        const newValue = e.target.value;
        e.target.value = '';
        scanBuffer += newValue;
        
        if (scanTimeout) clearTimeout(scanTimeout);
        scanTimeout = setTimeout(() => {
            if (scanBuffer.length > 0) {
                processScannedData(scanBuffer);
                scanBuffer = '';
            }
        }, 50);
    });

    scanInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && scanBuffer) {
            e.preventDefault();
            processScannedData(scanBuffer);
            scanBuffer = '';
        }
    });
}

function setupKeyboardShortcuts() {
    document.addEventListener('keydown', (e) => {
        // Ctrl+F - —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫
        if (e.ctrlKey && e.key === 'f') {
            e.preventDefault();
            const searchInput = document.getElementById('tableFilter');
            if (searchInput) {
                searchInput.focus();
                searchInput.select();
            }
        }
        
        // Ctrl+E - —ç–∫—Å–ø–æ—Ä—Ç
        if (e.ctrlKey && e.key === 'e') {
            e.preventDefault();
            exportToExcel();
        }
        
        // Ctrl+P - –ø–µ—á–∞—Ç—å
        if (e.ctrlKey && e.key === 'p') {
            e.preventDefault();
            const activeElement = document.activeElement;
            if (activeElement.tagName !== 'INPUT' && activeElement.tagName !== 'TEXTAREA') {
                printNextBarcode('box');
            }
        }
        
        // Esc - –æ—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
        if (e.key === 'Eescape') {
            const scanInput = document.getElementById('scanInput');
            if (document.activeElement === scanInput && scanInput.value) {
                scanInput.value = '';
            } else if (scanInput) {
                scanInput.focus();
            }
        }
    });
}

function processScannedData(data) {
    console.log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:', data);
    
    const palletPrefix = document.getElementById('palletPrefix')?.value || 'PALLET:';
    const boxPrefix = document.getElementById('boxPrefix')?.value || 'BOX:';

    if (data.startsWith(palletPrefix)) {
        currentPallet = data.substring(palletPrefix.length);
        currentBox = null;
        addToHistory(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞–ª–ª–µ—Ç–∞: ${currentPallet}`);
        updateCurrentInfo();
    } 
    else if (data.startsWith(boxPrefix)) {
        currentBox = data.substring(boxPrefix.length);
        addToHistory(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä–æ–±: ${currentBox}`);
        updateCurrentInfo();
    } 
    else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä –≤ –æ–∂–∏–¥–∞–µ–º—ã—Ö
        if (Object.keys(expectedItems).length > 0 && !expectedItems[data]) {
            showError(`–¢–æ–≤–∞—Ä "${data}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–º–µ—â—ë–Ω, —Ç.–∫. –æ–Ω –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∑–∏—Ü–∏–µ–π –≤ —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–µ!`);
            addToHistory(`–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä ${data} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞—è–≤–∫–µ`);
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–∞
        const validationResult = validateItemQuantity(data);
        if (!validationResult.isValid) {
            showError(validationResult.message);
            addToHistory(`–û—à–∏–±–∫–∞: ${validationResult.message}`);
            return;
        }
        
        addItem(data);
    }
    
    const input = document.getElementById('scanInput');
    if (input) input.value = '';
}

function addItem(barcode) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π —Ç–æ–≤–∞—Ä –≤ —Ç–æ–º –∂–µ –∫–æ—Ä–æ–±–µ –∏ –ø–∞–ª–ª–µ—Ç–µ
    const existingItemIndex = scanData.findIndex(item => 
        item.barcode === barcode && 
        item.box === currentBox && 
        item.pallet === currentPallet
    );

    if (existingItemIndex !== -1) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞
        scanData[existingItemIndex].quantity += 1;
        scanData[existingItemIndex].timestamp = new Date().toLocaleString('ru-RU');
        scanData[existingItemIndex].device = currentDeviceId;
        addToHistory(`–£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è: ${barcode}`);
    } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        const newItem = {
            pallet: currentPallet,
            box: currentBox,
            barcode: barcode,
            quantity: 1,
            timestamp: new Date().toLocaleString('ru-RU'),
            device: currentDeviceId
        };
        scanData.push(newItem);
        addToHistory(`–î–æ–±–∞–≤–ª–µ–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥: ${barcode}`);
    }

    updateRemainingItems(barcode, 1);
    saveToStorage();
    renderTable();
    updateDashboard();
    renderExpectedItems();
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –ø–æ–¥–Ω–∏–º–∞–µ–º –Ω–∞–≤–µ—Ä—Ö
    highlightScannedItem(barcode);
}

function validateItemQuantity(barcode) {
    if (expectedItems[barcode] === undefined) {
        return { isValid: true, message: '' };
    }

    const expectedQty = expectedItems[barcode];
    const alreadyScanned = scanData
        .filter(item => item.barcode === barcode)
        .reduce((sum, item) => sum + item.quantity, 0);

    const willBeAfterAdd = alreadyScanned + 1;

    if (willBeAfterAdd > expectedQty) {
        return {
            isValid: false,
            message: `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –±–æ–ª—å—à–µ! –®—Ç—Ä–∏—Ö–∫–æ–¥: ${barcode}\n–û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedQty}\n–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å: ${willBeAfterAdd}`
        };
    }

    return { isValid: true, message: '' };
}

function highlightScannedItem(barcode) {
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –ø–æ–¥–Ω–∏–º–∞–µ–º –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const expectedList = document.getElementById('expectedList');
    const expectedItems = expectedList.querySelectorAll('.expected-item');
    
    expectedItems.forEach(item => {
        const barcodeElement = item.querySelector('.expected-barcode');
        if (barcodeElement && barcodeElement.textContent === barcode) {
            item.classList.add('scanned');
            
            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ü–û–î –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–µ –Ω–∞ —Å–∞–º–æ–µ –≤–µ—Äx)
            const header = expectedList.querySelector('.expected-header');
            if (header && header.nextSibling) {
                expectedList.insertBefore(item, header.nextSibling);
            } else {
                expectedList.appendChild(item);
            }
            
            setTimeout(() => {
                item.classList.remove('scanned');
            }, 2000);
        }
    });
    
    // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const tableRows = document.querySelectorAll('#dataBody tr');
    tableRows.forEach(row => {
        const barcodeCell = row.querySelector('td:nth-child(3)');
        if (barcodeCell && barcodeCell.textContent === barcode) {
            row.classList.add('scanned-highlight');
            setTimeout(() => {
                row.classList.remove('scanned-highlight');
            }, 2000);
        }
    });
}

function updateCurrentInfo() {
    const currentPalletElement = document.getElementById('currentPallet');
    const currentBoxElement = document.getElementById('currentBox');
    
    if (currentPalletElement) currentPalletElement.textContent = currentPallet || '-';
    if (currentBoxElement) currentBoxElement.textContent = currentBox || '-';
}

function updateDashboard() {
    const dashboard = document.getElementById('compactDashboard');
    if (!dashboard) return;
    
    const totalExpected = Object.values(expectedItems).reduce((sum, qty) => sum + qty, 0);
    const totalScanned = scanData.reduce((sum, item) => sum + item.quantity, 0);
    const completionPercentage = totalExpected > 0 ? Math.round((totalScanned / totalExpected) * 100) : 0;
    
    const uniquePallets = new Set(scanData.map(item => item.pallet).filter(p => p));
    const uniqueBoxes = new Set(scanData.map(item => item.box).filter(b => b));
    const uniqueProducts = new Set(scanData.map(item => item.barcode));
    
    dashboard.innerHTML = `
        <div class="dashboard-grid">
            <div class="stat-card primary">
                <div class="stat-value">${totalScanned}</div>
                <div class="stat-label">–í—Å–µ–≥–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ</div>
                <div class="stat-subtext">–∏–∑ ${totalExpected} –æ–∂–∏–¥–∞–µ–º—ã—Ö</div>
            </div>
            
            <div class="stat-card success">
                <div class="stat-value">${completionPercentage}%</div>
                <div class="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞</div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: ${completionPercentage}%"></div>
                </div>
            </div>
            
            <div class="stat-card info">
                <div class="stat-value">${uniquePallets.size}</div>
                <div class="stat-label">–ü–∞–ª–ª–µ—Ç</div>
                <div class="stat-subtext">–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ</div>
            </div>
            
            <div class="stat-card warning">
                <div class="stat-value">${uniqueBoxes.size}</div>
                <div class="stat-label">–ö–æ—Ä–æ–±–æ–≤</div>
                <div class="stat-subtext">–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</div>
            </div>
            
            <div class="stat-card secondary">
                <div class="stat-value">${uniqueProducts.size}</div>
                <div class="stat-label">–¢–æ–≤–∞—Ä–æ–≤</div>
                <div class="stat-subtext">—Ä–∞–∑–Ω—ã—Ö SKU</div>
            </div>
        </div>
    `;
}

function renderExpectedItems() {
    const expectedList = document.getElementById('expectedList');
    if (!expectedList) return;
    
    // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ items, –æ—Å—Ç–∞–≤–ª—è–µ–º header
    const items = expectedList.querySelectorAll('.expected-item');
    items.forEach(item => item.remove());
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const sortedItems = Object.entries(expectedItems)
        .sort(([,a], [,b]) => b - a);
    
    sortedItems.forEach(([barcode, expectedQty]) => {
        const scannedQty = scanData
            .filter(item => item.barcode === barcode)
            .reduce((sum, item) => sum + item.quantity, 0);
        
        const remainingQty = Math.max(0, expectedQty - scannedQty);
        
        const itemElement = document.createElement('div');
        itemElement.className = 'expected-item';
        itemElement.innerHTML = `
            <div class="expected-barcode">${barcode}</div>
            <div class="expected-quantity">${expectedQty}</div>
            <div class="expected-scanned">${scannedQty}</div>
            <div class="expected-remaining ${remainingQty === 0 ? 'zero' : remainingQty < expectedQty * 0.3 ? 'danger' : 'warning'}">${remainingQty}</div>
        `;
        
        expectedList.appendChild(itemElement);
    });
}

function filterExpectedItems(searchTerm) {
    const items = document.querySelectorAll('.expected-item');
    items.forEach(item => {
        const barcodeElement = item.querySelector('.expected-barcode');
        if (barcodeElement && barcodeElement.textContent.includes(searchTerm)) {
            item.style.display = 'grid';
        } else {
            item.style.display = 'none';
        }
    });
}

function clearExpectedFilter() {
    document.getElementById('expectedSearch').value = '';
    const items = document.querySelectorAll('.expected-item');
    items.forEach(item => {
        item.style.display = 'grid';
    });
}

function clearTableFilter() {
    document.getElementById('tableFilter').value = '';
    renderTable();
}

function renderTable() {
    const tbody = document.getElementById('dataBody');
    if (!tbody) return;
    
    tbody.innerHTML = '';
    const filterText = document.getElementById('tableFilter')?.value.toLowerCase() || '';
    
    let filteredData = scanData.filter(item => 
        !filterText || 
        (item.pallet && item.pallet.toLowerCase().includes(filterText)) ||
        (item.box && item.box.toLowerCase().includes(filterText)) ||
        (item.barcode && item.barcode.toLowerCase().includes(filterText))
    );
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º
    filteredData = sortData(filteredData);
    
    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    const totalPages = Math.ceil(filteredData.length / itemsPerPage);
    const startIndex = (currentPage - 1) * itemsPerPage;
    const paginatedData = filteredData.slice(startIndex, startIndex + itemsPerPage);
    
    if (currentView === 'grouped') {
        renderGroupedTable(paginatedData);
    } else {
        renderAllTable(paginatedData);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    renderPagination(filteredData.length, totalPages);
}

function renderPagination(totalItems, totalPages) {
    let paginationContainer = document.getElementById('pagination');
    if (!paginationContainer) {
        paginationContainer = document.createElement('div');
        paginationContainer.id = 'pagination';
        paginationContainer.className = 'pagination';
        document.querySelector('.data-table-container').appendChild(paginationContainer);
    }
    
    paginationContainer.innerHTML = `
        <div class="pagination-info">
            –ü–æ–∫–∞–∑–∞–Ω–æ ${Math.min(itemsPerPage, totalItems)} –∏–∑ ${totalItems} –∑–∞–ø–∏—Å–µ–π
        </div>
        <div class="pagination-controls">
            <button onclick="changePage(${currentPage - 1})" ${currentPage === 1 ? 'disabled' : ''}>‚Üê –ù–∞–∑–∞–¥</button>
            <span>–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∏–∑ ${totalPages}</span>
            <button onclick="changePage(${currentPage + 1})" ${currentPage === totalPages ? 'disabled' : ''}>–í–ø–µ—Ä–µ–¥ ‚Üí</button>
        </div>
    `;
}

function changePage(page) {
    const totalPages = Math.ceil(scanData.length / itemsPerPage);
    if (page >= 1 && page <= totalPages) {
        currentPage = page;
        renderTable();
    }
}

function sortData(data) {
    return data.sort((a, b) => {
        let valueA = a[currentSort.column];
        let valueB = b[currentSort.column];
        
        if (currentSort.column === 'quantity') {
            valueA = Number(valueA); 
            valueB = Number(valueB);
        } else if (currentSort.column === 'timestamp') {
            valueA = new Date(valueA); 
            valueB = new Date(valueB);
        }
        
        if (valueA < valueB) return currentSort.direction === 'asc' ? -1 : 1;
        if (valueA > valueB) return currentSort.direction === 'asc' ? 1 : -1;
        return 0;
    });
}

function renderAllTable(data) {
    const tbody = document.getElementById('dataBody');
    
    data.forEach((item, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${item.pallet || '-'}</td>
            <td>${item.box || '-'}</td>
            <td>${item.barcode}</td>
            <td>${item.quantity}</td>
            <td>${item.timestamp}</td>
            <td>${item.device || '-'}</td>
            <td><button class="delete-btn" onclick="deleteItem(${scanData.length - index - 1})">–£–¥–∞–ª–∏—Ç—å</button></td>
        `;
        tbody.appendChild(row);
    });
}

function renderGroupedTable(data) {
    const tbody = document.getElementById('dataBody');
    const groupedData = {};
    
    data.forEach(item => {
        const groupKey = `${item.pallet || 'no-pallet'}_${item.box || 'no-box'}`;
        if (!groupedData[groupKey]) {
            groupedData[groupKey] = { pallet: item.pallet, box: item.box, items: [], total: 0 };
        }
        
        const existingItemIndex = groupedData[groupKey].items.findIndex(i => i.barcode === item.barcode);
        if (existingItemIndex !== -1) {
            groupedData[groupKey].items[existingItemIndex].quantity += item.quantity;
        } else {
            groupedData[groupKey].items.push({...item});
        }
        groupedData[groupKey].total += item.quantity;
    });
    
    Object.values(groupedData).sort((a, b) => {
        if (a.pallet !== b.pallet) return (a.pallet || '').localeCompare(b.pallet || '');
        return (a.box || '').localeCompare(b.box || '');
    }).forEach(group => {
        const groupHeader = document.createElement('tr');
        groupHeader.className = 'group-header';
        groupHeader.innerHTML = `<td colspan="7">üì¶ ${group.pallet || '–ë–µ–∑ –ø–∞–ª–ª–µ—Ç—ã'} / ${group.box || '–ë–µ–∑ –∫–æ—Ä–æ–±–∞'} (–í—Å–µ–≥–æ: ${group.total} —à—Ç.)</td>`;
        tbody.appendChild(groupHeader);
        
        group.items.forEach(item => {
            const originalIndex = scanData.findIndex(scan => scan.pallet === item.pallet && scan.box === item.box && scan.barcode === item.barcode);
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${item.pallet || '-'}</td>
                <td>${item.box || '-'}</td>
                <td>${item.barcode}</td>
                <td>${item.quantity}</td>
                <td>${item.timestamp}</td>
                <td>${item.device || '-'}</td>
                <td><button class="delete-btn" onclick="deleteItem(${originalIndex})">–£–¥–∞–ª–∏—Ç—å</button></td>
            `;
            tbody.appendChild(row);
        });
    });
}

function deleteItem(index) {
    if (index < 0 || index >= scanData.length) return;
    
    const deletedItem = scanData[index];
    scanData.splice(index, 1);
    updateRemainingItems(deletedItem.barcode, -deletedItem.quantity);
    addToHistory(`–£–¥–∞–ª–µ–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥: ${deletedItem.barcode}`);
    saveToStorage();
    renderTable();
    updateDashboard();
    renderExpectedItems();
}

function toggleTableView(view) {
    currentView = view;
    currentPage = 1;
    renderTable();
    
    const viewAllButton = document.getElementById('viewAll');
    const viewGroupedButton = document.getElementById('viewGrouped');
    
    if (viewAllButton && viewGroupedButton) {
        viewAllButton.classList.toggle('active', view === 'all');
        viewGroupedButton.classList.toggle('active', view === 'grouped');
    }
}

function sortTable(column) {
    if (currentSort.column === column) {
        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
    } else {
        currentSort.column = column;
        currentSort.direction = 'asc';
    }
    currentPage = 1;
    renderTable();
}

function clearScan() {
    const input = document.getElementById('scanInput');
    if (input) {
        input.value = '';
        input.focus();
    }
}

function printNextBarcode(type) {
    const prefix = type === 'pallet' ? document.getElementById('palletPrefix').value : document.getElementById('boxPrefix').value;
    const autoIncrement = document.getElementById('autoIncrement').checked;
    let number;
    
    if (autoIncrement) {
        if (type === 'pallet') {
            lastPalletNumber++;
            number = lastPalletNumber.toString().padStart(4, '0');
        } else {
            lastBoxNumber++;
            number = lastBoxNumber.toString().padStart(6, '0');
        }
        saveLastNumbers();
    } else {
        number = prompt(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è ${type === 'pallet' ? '–ø–∞–ª–ª–µ—Ç—ã' : '–∫–æ—Ä–æ–±–∞'}:`);
        if (!number) return;
    }
    
    const barcodeValue = prefix + number;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥
    if (type === 'pallet') {
        if (!printedBarcodes.pallets.includes(barcodeValue)) {
            printedBarcodes.pallets.push(barcodeValue);
        }
    } else {
        if (!printedBarcodes.boxes.includes(barcodeValue)) {
            printedBarcodes.boxes.push(barcodeValue);
        }
    }
    savePrintedBarcodes();
    
    addToHistory(`–ù–∞–ø–µ—á–∞—Ç–∞–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥: ${barcodeValue}`);
    printBarcodeDirect(barcodeValue, type);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏
    updateExistingLists();
}

function printExisting(type) {
    const selectElement = document.getElementById(type === 'pallet' ? 'existingPallets' : 'existingBoxes');
    const value = selectElement.value;
    if (!value) {
        showError('–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞');
        return;
    }
    
    addToHistory(`–ü–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥: ${value}`);
    printBarcodeDirect(value, type);
}

function printBarcodeDirect(value, type) {
    if (typeof JsBarcode === 'undefined') {
        showError('–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        return;
    }

    const barcodeType = document.getElementById('barcodeType').value;
    const showText = document.getElementById('showText').checked;
    
    const container = document.createElement('div');
    container.style.position = 'absolute';
    container.style.left = '-9999px';
    document.body.appendChild(container);
    
    const canvas = document.createElement('canvas');
    container.appendChild(canvas);
    
    try {
        JsBarcode(canvas, value, {
            format: barcodeType,
            displayValue: showText,
            width: 2,
            height: 40,
            fontSize: 12,
            margin: 5,
            textMargin: 2
        });
        
        const printContent = `
            <!DOCTYPE html>
            <html>
            <head><title>–ü–µ—á–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥–∞</title>
                <style>
                    @media print {
                        body { 
                            margin: 0; 
                            padding: 0; 
                            width: 58mm; 
                            height: 40mm; 
                            font-family: Arial, sans-serif; 
                        }
                        @page { 
                            size: 58mm 40mm; 
                            margin: 0; 
                        }
                        .label-container { 
                            width: 58mm; 
                            height: 40mm; 
                            display: flex; 
                            flex-direction: column; 
                            justify-content: center; 
                            align-items: center; 
                            padding: 2mm; 
                            box-sizing: border-box; 
                        }
                        .label-type { 
                            font-size: 12px; 
                            font-weight: bold; 
                            margin-bottom: 2mm; 
                            text-align: center; 
                        }
                        .barcode-container { 
                            margin: 1mm 0; 
                            max-width: 54mm; 
                            max-height: 20mm; 
                            display: flex; 
                            justify-content: center; 
                            align-items: center; 
                        }
                        .barcode-value { 
                            font-size: 10px; 
                            text-align: center; 
                            margin-top: 1mm; 
                            word-break: break-all; 
                            max-width: 54mm; 
                            padding: 0 1mm; 
                        }
                        .print-date { 
                            font-size: 9px; 
                            margin-top: 1mm; 
                            color: #666; 
                        }
                    }
                </style>
            </head>
            <body>
                <div class="label-container">
                    <div class="label-type">${type === 'pallet' ? '–ü–ê–õ–õ–ï–¢–ê' : '–ö–û–†–û–ë'}</div>
                    <div class="barcode-container">
                        <img src="${canvas.toDataURL('image/png')}" style="max-width: 54mm; max-height: 20mm;">
                    </div>
                    ${showText ? `<div class="barcode-value">${value}</div>` : ''}
                    <div class="print-date">${new Date().toLocaleDateString('ru-RU')} ${new Date().toLocaleTimeString('ru-RU')}</div>
                </div>
            </body>
            </html>
        `;
        
        const printWindow = window.open('', '_blank');
        printWindow.document.write(printContent);
        printWindow.document.close();
        
        setTimeout(() => {
            printWindow.print();
            setTimeout(() => {
                printWindow.close();
                document.body.removeChild(container);
            }, 100);
        }, 500);
        
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞: ' + error.message);
        document.body.removeChild(container);
    }
}

function exportToExcel() {
    try {
        const wb = XLSX.utils.book_new();
        const excelData = [
            ['–û—Ç—á–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–ª–∞–¥–∞'],
            ['–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:', new Date().toLocaleString('ru-RU')],
            ['–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:', scanData.length],
            [''],
            ['–ü–∞–ª–ª–µ—Ç–∞', '–ö–æ—Ä–æ–±', '–®—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–í—Ä–µ–º—è', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ']
        ];
        
        scanData.forEach(item => {
            excelData.push([
                item.pallet || '',
                item.box || '',
                item.barcode,
                item.quantity,
                item.timestamp,
                item.device || ''
            ]);
        });
        
        const ws = XLSX.utils.aoa_to_sheet(excelData);
        XLSX.utils.book_append_sheet(wb, ws, '–°–∫–∞–Ω—ã —Å–∫–ª–∞–¥–∞');
        XLSX.writeFile(wb, `—Å–∫–∞–Ω–µ—Ä_—Å–∫–ª–∞–¥–∞_${new Date().toISOString().split('T')[0]}.xlsx`);
        
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞');
    }
}

function exportFullHistoryToExcel() {
    try {
        const wb = XLSX.utils.book_new();
        
        // –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        const historyData = [
            ['–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π'],
            ['–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:', new Date().toLocaleString('ru-RU')],
            ['–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:', history.length],
            [''],
            ['–í—Ä–µ–º—è', '–î–µ–π—Å—Ç–≤–∏–µ', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ']
        ];
        
        history.forEach(item => {
            historyData.push([item.timestamp, item.action, item.device]);
        });
        
        const wsHistory = XLSX.utils.aoa_to_sheet(historyData);
        XLSX.utils.book_append_sheet(wb, wsHistory, '–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        
        // –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å–∫–∞–Ω–æ–≤
        const scanDataExport = [
            ['–í—Å–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'],
            ['–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è:', new Date().toLocaleString('ru-RU')],
            ['–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:', scanData.length],
            [''],
            ['–ü–∞–ª–ª–µ—Ç–∞', '–ö–æ—Ä–æ–±', '–®—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–í—Ä–µ–º—è', '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ']
        ];
        
        scanData.forEach(item => {
            scanDataExport.push([
                item.pallet || '',
                item.box || '',
                item.barcode,
                item.quantity,
                item.timestamp,
                item.device || ''
            ]);
        });
        
        const wsScans = XLSX.utils.aoa_to_sheet(scanDataExport);
        XLSX.utils.book_append_sheet(wb, wsScans, '–í—Å–µ —Å–∫–∞–Ω—ã');
        
        XLSX.writeFile(wb, `–ø–æ–ª–Ω–∞—è_–∏—Å—Ç–æ—Ä–∏—è_${new Date().toISOString().split('T')[0]}.xlsx`);
        addToHistory('–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è');
        
    } catch (error) {
        showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –∏—Å—Ç–æ—Ä–∏–∏: ' + error.message);
    }
}

function clearAllData() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
        scanData = [];
        printedBarcodes = { pallets: [], boxes: [] }; // –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã
        saveToStorage();
        savePrintedBarcodes(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        renderTable();
        updateDashboard();
        renderExpectedItems();
        updateExistingLists(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏
        addToHistory('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        alert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã');
    }
}

function clearCurrent() {
    currentPallet = null;
    currentBox = null;
    updateCurrentInfo();
    addToHistory('–¢–µ–∫—É—â–∏–µ –ø–∞–ª–ª–µ—Ç–∞ –∏ –∫–æ—Ä–æ–± —Å–±—Ä–æ—à–µ–Ω—ã');
    alert('–¢–µ–∫—É—â–∏–µ –ø–∞–ª–ª–µ—Ç–∞ –∏ –∫–æ—Ä–æ–± —Å–±—Ä–æ—à–µ–Ω—ã');
}

function clearExpectedItems() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã?')) {
        expectedItems = {};
        remainingItems = {};
        saveExpectedItems();
        renderExpectedItems();
        addToHistory('–û—á–∏—â–µ–Ω—ã –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã');
        alert('–û–∂–∏–¥–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã –æ—á–∏—â–µ–Ω—ã');
    }
}

function loadExpectedFromFile(file) {
    const reader = new FileReader();
    reader.onload = (e) => {
        try {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, {type: 'array'});
            const worksheet = workbook.Sheets[workbook.SheetNames[0]];
            const jsonData = XLSX.utils.sheet_to_json(worksheet);
            
            expectedItems = {};
            jsonData.forEach(row => {
                const barcode = row['–®—Ç—Ä–∏—Ö–∫–æ–¥'] || row['—à—Ç—Ä–∏—Ö–∫–æ–¥'] || row['Barcode'] || row['barcode'];
                const quantity = row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] || row['–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ'] || row['Quantity'] || row['quantity'];
                
                if (barcode && quantity) {
                    expectedItems[barcode] = parseInt(quantity);
                }
            });
            
            calculateRemainingItems();
            saveExpectedItems();
            updateDashboard();
            renderExpectedItems();
            addToHistory('–ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –ø–ª–∞–Ω —Ç–æ–≤–∞—Ä–æ–≤');
            alert('–û–∂–∏–¥–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!');
            
        } catch (error) {
            showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.');
        }
    };
    reader.readAsArrayBuffer(file);
}

function updateExistingLists() {
    const palletSelect = document.getElementById('existingPallets');
    const boxSelect = document.getElementById('existingBoxes');
    
    if (!palletSelect || !boxSelect) return;
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–∫–∏
    palletSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ª–ª–µ—Ç—É</option>';
    boxSelect.innerHTML = '<option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±</option>';
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–∞–ª–ª–µ—Ç—ã
    printedBarcodes.pallets.forEach(pallet => {
        const option = document.createElement('option');
        option.value = pallet;
        option.textContent = pallet;
        palletSelect.appendChild(option);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–æ–±–∞
    printedBarcodes.boxes.forEach(box => {
        const option = document.createElement('option');
        option.value = box;
        option.textContent = box;
        boxSelect.appendChild(option);
    });
}

// ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ô –≠–ö–°–ü–û–†–¢ ====================
window.login = handleLogin;
window.register = handleRegister;
window.logout = logout;
window.clearScan = clearScan;
window.processScannedData = processScannedData;
window.addItem = addItem;
window.deleteItem = deleteItem;
window.toggleTableView = toggleTableView;
window.sortTable = sortTable;
window.printNextBarcode = printNextBarcode;
window.printExisting = printExisting;
window.printBarcodeDirect = printBarcodeDirect;
window.exportToExcel = exportToExcel;
window.exportFullHistoryToExcel = exportFullHistoryToExcel;
window.clearAllData = clearAllData;
window.clearCurrent = clearCurrent;
window.clearExpectedItems = clearExpectedItems;
window.loadExpectedFromFile = loadExpectedFromFile;
window.filterExpectedItems = filterExpectedItems;
window.clearExpectedFilter = clearExpectedFilter;
window.clearTableFilter = clearTableFilter;
window.changePage = changePage;